// common url - https://realestate-project-6mri.onrender.com/api/v1/...add path name according the requirement.


 // dummy user

*Note : store the token (jwt auth). 


// seller : sell property ,update property,
user1: 
 "email":"mark@gmail.com",
  "password":"123456"

user2:
   "email":"tony@gmail.com",
   "password":"123456"

user3:
   "email":"marko@gmail.com",
  "password":"123456"

user4 :
   "email":"mukesh@gmail.com",
    "password":"123456"


// buyer : only buy property

user5:

 "email":"steve@gmail.com",
  "password":"123456"


user6:
  "email":"bill@gmail.com",
  "password":"123456"

   

  




 < user 1> 

   "email":"mark@gmail.com",
    "password":"123456"

"user": {
        "_id": "661f9e2ab8688465d485675b",
        "username": "mark",
        "email": "mark@gmail.com",
        "role": "Seller",
        "profile_url": "https://img.icons8.com/?size=512&id=Hlit4zUKvNra&format=png"
    }

// token valid upto 5 day : 22/4/24

access_token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1hcmtAZ21haWwuY29tIiwiX2lkIjoiNjYxZjllMmFiODY4ODQ2NWQ0ODU2NzViIiwicm9sZSI6IlNlbGxlciIsImlhdCI6MTcxMzM0ODI0NX0.jPEAW7-8f6PYBnG6wszWk5Im9ZqCdUApYD2E19o4NUM
 


<user 2>

   "email":"tony@gmail.com",
   "password":"123456"

     "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRvbnlAZ21haWwuY29tIiwiX2lkIjoiNjYxZmEyMzliODY4ODQ2NWQ0ODU2NzY3Iiwicm9sZSI6IlNlbGxlciIsImlhdCI6MTcxMzM0OTE5M30.VBc45zAFheDtQb8U8yqBvCSznL3EdFLVOyLH4QTDf-Y",

    "user": {
        "_id": "661fa239b8688465d4856767",
        "username": "tony robbins",
        "email": "tony@gmail.com",
        "role": "Seller",
        "profile_url": "https://img.icons8.com/?size=160&id=97613&format=png"
    } 



<user 3>

 "email":"marko@gmail.com",
  "password":"123456"


 "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1hcmtvQGdtYWlsLmNvbSIsIl9pZCI6IjY2MWZhM2RhYjg2ODg0NjVkNDg1Njc3MyIsInJvbGUiOiJTZWxsZXIiLCJpYXQiOjE3MTMzNDk2NjB9.OquFq6d1T05DCUMw4c91Hk1mTEfZC_VLaRK8qp5MoZI",


    "user": {
        "_id": "661fa3dab8688465d4856773",
        "username": "marko topo",
        "email": "marko@gmail.com",
        "role": "Seller",
        "profile_url": "https://img.icons8.com/?size=512&id=97613&format=png"
    }


  <user 4>

   "email":"mukesh@gmail.com",
    "password":"123456"



   "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im11a2VzaEBnbWFpbC5jb20iLCJfaWQiOiI2NjFmYTU4OWI4Njg4NDY1ZDQ4NTY3NzciLCJyb2xlIjoiU2VsbGVyIiwiaWF0IjoxNzEzMzUwMDQxfQ.3o3B3qKOcbJCUskfL1inK3wRJAU3xrO43IyvzZBoXeg",

    "user": {
        "_id": "661fa589b8688465d4856777",
        "username": "mukesh ambani",
        "email": "mukesh@gmail.com",
        "role": "Seller",
        "profile_url": "https://img.icons8.com/?size=512&id=Hlit4zUKvNra&format=png"
    }


   // buyer

 <user5>  

   {
     "email":"bill@gmail.com",
    "password":"123456"
}

{
    "status": "success",

    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJpbGxAZ21haWwuY29tIiwiX2lkIjoiNjYxZmE2ZDdiODY4ODQ2NWQ0ODU2NzgzIiwicm9sZSI6IkJ1eWVyIiwiaWF0IjoxNzEzMzUwMzgyfQ.biBS6hzv9Wx6u1CWLIiv7AQd2sT5-sLTPHw1p96_AXk",

    "user": {
        "_id": "661fa6d7b8688465d4856783",
        "username": "bill gates",
        "email": "bill@gmail.com",
        "role": "Buyer",
        "profile_url": "https://img.icons8.com/?size=512&id=9bEZ4mjOGldh&format=png"
    }
}


<user 6>

 "email":"steve@gmail.com",
    "password":"123456"


{
    "status": "success",
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InN0ZXZlQGdtYWlsLmNvbSIsIl9pZCI6IjY2MWZhNzcyYjg2ODg0NjVkNDg1Njc4NyIsInJvbGUiOiJCdXllciIsImlhdCI6MTcxMzM1MDUzMn0.A-ulF7J-yetvSaglxmpS_4IqjCSpb-ApRzIrpaWP49g",
    "user": {
        "_id": "661fa772b8688465d4856787",
        "username": "steve jobs",
        "email": "steve@gmail.com",
        "role": "Buyer",
        "profile_url": "https://img.icons8.com/?size=512&id=97613&format=png"
    }
}
  


 ----------Auth------------    

        1) [ User Sign Up ]

        Route: POST /api/v1/auth/signup

        Description: Allows users to sign up and create a new account.

        Request Headers:
        Content-Type: application/json

        {
        "username": "example_user",
        "email": "example@example.com",
        "password": "examplepassword",
        "role": "Buyer"
        }

        Fields:

        username (string, required): User's desired username.
        email (string, required): User's email address.
        password (string, required): User's chosen password (min. 6 characters).
        role (string, required): User's role (Buyer/Seller).

        Example:
        {
        "username": "john_doe",
        "email": "john@example.com",
        "password": "johns_password",
        "role": "Buyer"
        }


        Response Headers:

        Content-Type: application/json

        Response Body:
        {
        "status": "success"
        }


        2)  [ User Sign In ]

        Route: POST /api/v1/auth/signin

        Description: Allows users to sign in and access their account.

        Request Headers:
        Content-Type: application/json

        Request Body:
        {
        "email": "example@example.com",
        "password": "examplepassword"
        }

        Fields:

        email (string, required): User's registered email address.
        password (string, required): User's password.

        Response Headers:
        Content-Type: application/json

        Response Body:
        {
        "status": "success",
        "message": "Login successful",
        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "user": {
          "_id": "60f4e3a29f047d2e58b6a6e0",
          "username": "john_doe",
          "email": "john@example.com",
          "role": "Buyer",
          "profile_url": "https://example.com/profile.jpg"
        }
        }

       ** Note: 
        The access_token is required for accessing authenticated routes. It needs to be included in the Authorization header as Bearer <access_token>

        eg : Bearer <access_token>

-------------User API Documentation--------------

      1) GET ALL USER :

      Route: GET /api/v1/users

      Description: Retrieve a list of users with optional pagination and filtering by user role.

      Request Headers:
      Content-Type: application/json

      Query Parameters:
      page (optional, integer): Page number for pagination (default: 1).
      size (optional, integer): Number of users per page (default: 10).
      role (optional, string): Filter users by role (Buyer/Seller).


      Response Headers:
      Content-Type: application/json

      Response Body:
      {
        "status": "success",
        "users": [
          {
            "_id": "603f6534a78d2d2188f2c70a",
            "username": "example_user1",
            "email": "user1@example.com",
            "role": "Buyer",
            "profile_url": "https://example.com/profile1.jpg"
          },
          {
            "_id": "603f6534a78d2d2188f2c70b",
            "username": "example_user2",
            "email": "user2@example.com",
            "role": "Seller",
            "profile_url": "https://example.com/profile2.jpg"
          }
        ]
      }


      2) GET SINGLE USER.

      Route: GET /api/v1/user/profile/:userId

      eg : /api/v1/user/profile/88474fhhj4hj484gd

      Description: Retrieve details of a single user by their user ID.

      Request Headers:
      Content-Type: application/json

      Path Parameters:
      userId (string): Unique ID of the user.

      Response Headers:
      Content-Type: application/json

      Response Body:
      {
        "status": "success",
        "user": {
          "_id": "603f6534a78d2d2188f2c70a",
          "username": "example_user1",
          "email": "user1@example.com",
          "role": "Buyer",
          "profile_url": "https://example.com/profile1.jpg"
        }
      }


      3) UPDATE USER PROFILE :

   - { update multiple fields}. FOR USERNAME,AGE,GENDER,ADDRESS,PHONE,SOCIALURLS,PASSWORD,ROLE

   NOTE : here also update one or more fields which is mentioned upper . 

      Route: PUT /api/v1/user/profile/update

      Description: Update user profile information.

      Request Headers:
      body:{..update data}
      Content-Type: application/json
      Authorization: Bearer <access_token>

     

      Request Body (all field string):

      {
      "username": "updated_username",
      "age": "30" ,
      "gender": "Male" ,
      "address": "123 Updated Street" ,
      "phone": "1234567890",
      "role":"seller",
    
      "socialUrls": {
      
        "LinkedIn": "https://linkedin.com/updated_profile",
        "Facebook": "https://facebook.com/updated_profile",
        "Twitter": "https://twitter.com/updated_profile",
        "Instagram": "https://instagram.com/updated_profile"
      }
    }



      Response Headers:
      Content-Type: application/json

      Response Body :
      {
        "status": "success",
        }

     Note : email are not update;
      


  - {Single field Update 1. } :FOR PASSWORD
 

       Route: PUT /api/v1/user/profile/update/

      Description: Update user profile information.

      Request Headers:
      Content-Type: application/json
      Authorization: Bearer <access_token>



     Request Body:

     {"password":"prevPassword",
       "newPassword:"NewPassword"
     }


       Response Headers:
      Content-Type: application/json

      Response Body :
      {
        "status": "success",
        }
      



       - {Single Update 2. } FOR ROLE

       Route: (PUT req)  /api/v1/user/profile/update/:userId

      Request Headers:
      Content-Type: application/json
      Authorization: Bearer <access_token>

     Request Body:

     {"role":"seller or buyer"} // any one


       Response Headers:
      Content-Type: application/json

      Response Body :
      { 
        "status": "success",
         "access_token": <token>
        }
      
     Note : after role(here change account type),password update required to login.



     4) delete Account :
     url : https://realestate-project-6mri.onrender.com/api/v1/user/delete
     
     pass from client :
  
    
       body: {"password":"eg.123456"} 
      Content-Type: application/json
      Authorization: Bearer <access_token>



---------------PROPERTY DOC----------------------


      Sure, here's the API documentation for the endpoints described in your code:

      1) GET All Properties: 

      URL:https://realestate-project-6mri.onrender.com/api/v1/selling/property/all?page=1&size=4

      Description: Retrieves all available properties.

      Request:
      No request parameters required.
      Response:
      Status 200 OK

      {
        "status": "success",
        "allProperty": [
          {
            "_id": "string",
            "title": "string",
            "description": "string",
            "location": {
              "city": "string",
              "region": "string",
              "country": "string",
              "postalCode": "string"
            },
            "price": "number",
            "imagesUrl": ["string"],
            "propertyInfo": {
              "bedrooms": "number",
              "bathrooms": "number",
              "squareFeet": "number"
            },
            "owner": {
              "_id": "string",
              "username": "string"
            },
            "soldBy": "string",
            "isSold": "boolean",
            "nagotiate": "boolean",
            "tags": "string",
            "createdAt": "string",
            "updatedAt": "string"
          }
        ]
      }

      Status 500 Internal Server Error:

      {
        "status": "failed",
        "message": "error message"
      }


      2) GET Search Properties :

      URL: /api/v1/selling/property/search

      Description: Search for properties based on a query string.

      Request:
        Query Parameters:
  
          page (optional, integer): Page number for pagination (default: 1).
          size (optional, integer): Number of users per page (default: 10).

          searchQuery: String (required) - The search query.

      Response:
      Same as the response for "GET All Properties".

      3) GET All Properties By Owner :

      URL: /api/v1/owner/selling/properties

      Query Parameters:
        page (optional, integer): Page number for pagination (default: 1).
        size (optional, integer): Number of users per page (default: 10).


      Description: Retrieves all properties owned by the authenticated user.

      Request:
        Headers:
        Authorization: Bearer token

      Response:
      Same as the response for "GET All Properties".


      4) POST Create Property :

      URL: /api/v1/owner/selling/property

      Description: Create a new property listing.

      Request:
        Headers:
        Authorization: Bearer token

      Body:

        {
          "title": "string"(required),
          "description": "string"(required),
          "location": {
            "city": "string"(required),
            "region": "string",
            "country": "string"(required),
            "postalCode": "string"
          },
          "price": "number"(required),
          "propertyInfo": {
            "bedrooms": "number",
            "bathrooms": "number",
            "squareFeet": "number"
          },
            tags: {
          type: String,
          default: 'none'
        },

        }

      Response:

      Status 200 OK:
        {
          "status": "success",
          "message": "Property added successfully for selling"
        }


      if Error:

      {
        "status": "failed",
        "message": "error message"
      }


      5) PUT Update Property :

      URL: /api/v1/selling/property/update/:id

      Description: Update an existing property listing.

      Request:
        Headers:
        Authorization: Bearer token

      Params:
        id: String (required) - Property ID

      Body:

        {
          "title": "string",
          "description": "string",
          "location": {
            "city": "string",
            "region": "string",
            "country": "string",
            "postalCode": "string"
          },
          "price": "number",
          "propertyInfo": {
            "bedrooms": "number",
            "bathrooms": "number",
            "squareFeet": "number"
          }
        }


      Response:
      Status 200 OK:

        {
          "status": "success"
        }


      if error :
      Response:
        {
        "status": "failed",
        "message": "error message"
      }



---------------review------------------
// get all review :
https://realestate-project-6mri.onrender.com/api/v1/property/review/all


// post review 

field (json data for post request ): 
Note all fields are required

property : here property id,
rating : (number),
about :(string)

https://realestate-project-6mri.onrender.com/api/v1/property/review/create


--------------------visitor scheduled-------------------

note : pass the the property id in properyId params.

1)scheduled visit date date (post request) 
- pass user token

url - https://realestate-project-6mri.onrender.com/api/v1/property/visitor/:propertyId


2)  get all visitor of particular properties
   - get request
url - https://realestate-project-6mri.onrender.com/api/v1/property/visitors/:propertyId