 ----------Auth------------    

        1) [ User Sign Up ]

        Route: POST /api/v1/auth/signup

        Description: Allows users to sign up and create a new account.

        Request Headers:
        Content-Type: application/json

        {
        "username": "example_user",
        "email": "example@example.com",
        "password": "examplepassword",
        "role": "Buyer"
        }

        Fields:

        username (string, required): User's desired username.
        email (string, required): User's email address.
        password (string, required): User's chosen password (min. 6 characters).
        role (string, required): User's role (Buyer/Seller).

        Example:
        {
        "username": "john_doe",
        "email": "john@example.com",
        "password": "johns_password",
        "role": "Buyer"
        }


        Response Headers:

        Content-Type: application/json

        Response Body:
        {
        "status": "success"
        }


        2)  [ User Sign In ]

        Route: POST /api/v1/auth/signIn

        Description: Allows users to sign in and access their account.

        Request Headers:
        Content-Type: application/json

        Request Body:
        {
        "email": "example@example.com",
        "password": "examplepassword"
        }

        Fields:

        email (string, required): User's registered email address.
        password (string, required): User's password.

        Response Headers:
        Content-Type: application/json

        Response Body:
        {
        "status": "success",
        "message": "Login successful",
        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "user": {
          "_id": "60f4e3a29f047d2e58b6a6e0",
          "username": "john_doe",
          "email": "john@example.com",
          "role": "Buyer",
          "profile_url": "https://example.com/profile.jpg"
        }
        }

       ** Note: 
        The access_token is required for accessing authenticated routes. It needs to be included in the Authorization header as Bearer <access_token>

        eg : Bearer <access_token>

-------------User API Documentation--------------

      1) GET ALL USER :

      Route: GET /api/v1/users

      Description: Retrieve a list of users with optional pagination and filtering by user role.

      Request Headers:
      Content-Type: application/json

      Query Parameters:
      page (optional, integer): Page number for pagination (default: 1).
      size (optional, integer): Number of users per page (default: 10).
      role (optional, string): Filter users by role (Buyer/Seller/Admin).


      Response Headers:
      Content-Type: application/json

      Response Body:
      {
        "status": "success",
        "users": [
          {
            "_id": "603f6534a78d2d2188f2c70a",
            "username": "example_user1",
            "email": "user1@example.com",
            "role": "Buyer",
            "profile_url": "https://example.com/profile1.jpg"
          },
          {
            "_id": "603f6534a78d2d2188f2c70b",
            "username": "example_user2",
            "email": "user2@example.com",
            "role": "Seller",
            "profile_url": "https://example.com/profile2.jpg"
          }
        ]
      }


      2) GET SINGLE USER.

      Route: GET /api/v1/user/profile/:userId

      Description: Retrieve details of a single user by their user ID.

      Request Headers:
      Content-Type: application/json

      Path Parameters:
      userId (string): Unique ID of the user.

      Response Headers:
      Content-Type: application/json

      Response Body:
      {
        "status": "success",
        "user": {
          "_id": "603f6534a78d2d2188f2c70a",
          "username": "example_user1",
          "email": "user1@example.com",
          "role": "Buyer",
          "profile_url": "https://example.com/profile1.jpg"
        }
      }


      3) UPDATE USER PROFILE :

   - { update multiple fields}. FOR USERNAME,AGE,GENDER,ADDRESS,PHONE,SOCIALURLS

   NOTE : here update these field sigle as well combination according to requirement. 

      Route: PUT /api/v1/user/profile/update/:userId

      Description: Update user profile information.

      Request Headers:
      Content-Type: application/json
      Authorization: Bearer <access_token>

      Path Parameters:
      userId (string): Unique ID of the user.

      Request Body:

      {
      "username": "updated_username",
      "age": "30",
      "gender": "Male",
      "address": "123 Updated Street",
      "phone": "1234567890",
      "socialUrls": {
        "LinkedIn": "https://linkedin.com/updated_profile",
        "Facebook": "https://facebook.com/updated_profile",
        "Twitter": "https://twitter.com/updated_profile",
        "Instagram": "https://instagram.com/updated_profile"
      }
    }



      Response Headers:
      Content-Type: application/json

      Response Body :
      {
        "status": "success",
        }

     Note : email,password,role are not update in multiple update   
      


  - {Single field Update 1. } :FOR PASSWORD
 

       Route: PUT /api/v1/user/profile/update/:userId

      Description: Update user profile information.

      Request Headers:
      Content-Type: application/json
      Authorization: Bearer <access_token>

      Path Parameters:
      userId (string): Unique ID of the user.

     Request Body:

     {"password":"newPassword"}


       Response Headers:
      Content-Type: application/json

      Response Body :
      {
        "status": "success",
        }
      



       - {Single Update 2. } FOR ROLE

       Route: PUT /api/v1/user/profile/update/:userId

      Description: Update user profile information.

      Request Headers:
      Content-Type: application/json
      Authorization: Bearer <access_token>

      Path Parameters:
      userId (string): Unique ID of the user.

     Request Body:

     {"role":"seller or buyer"} // any one


       Response Headers:
      Content-Type: application/json

      Response Body :
      { 
        "status": "success",
         "access_token": <token>
        }
      
      Note:
      Replace <access_token> with the actual access token obtained from the authentication process.
      For the update profile endpoint, only the fields mentioned in the request body can be updated.



